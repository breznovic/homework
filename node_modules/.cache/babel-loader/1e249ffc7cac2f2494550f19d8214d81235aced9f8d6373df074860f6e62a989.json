{"ast":null,"code":"// вот вам функция для сохранения объектов в память браузера\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\nexport function saveState(key,state){var stateAsString=JSON.stringify(state);localStorage.setItem(key,stateAsString);}// и вот вам функция для получения сохранённого объекта в памяти браузера:\nexport function restoreState(key,defaultState){var state=defaultState;var stateAsString=localStorage.getItem(key);if(stateAsString!==null)state=JSON.parse(stateAsString);return state;}// ---------------------------------------------------------------------------------------------------------------\n// пример использования:\n/*\ntype StateType = {\n    x: string\n    y: number\n}\n\n// сохраняем объект типа StateType в ячейке 'test'\nsaveState<StateType>('test', { x: 'A', y: 1 })\n\n// получаем в переменную state объект из ячейки 'test' или дэфолтный объект если ячейка пуста\nconst state: StateType = restoreState<StateType>('test', { x: '', y: 0 })\n */","map":{"version":3,"names":["saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse"],"sources":["/home/breznovic/React/homework/src/s2-homeworks/hw06/localStorage/localStorage.ts"],"sourcesContent":["// вот вам функция для сохранения объектов в память браузера\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state)\n    localStorage.setItem(key, stateAsString)\n}\n\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\nexport function restoreState<T>(key: string, defaultState: T) {\n    let state = defaultState\n    const stateAsString = localStorage.getItem(key)\n    if (stateAsString !== null) state = JSON.parse(stateAsString) as T\n    return state\n}\n\n// ---------------------------------------------------------------------------------------------------------------\n// пример использования:\n/*\ntype StateType = {\n    x: string\n    y: number\n}\n\n// сохраняем объект типа StateType в ячейке 'test'\nsaveState<StateType>('test', { x: 'A', y: 1 })\n\n// получаем в переменную state объект из ячейки 'test' или дэфолтный объект если ячейка пуста\nconst state: StateType = restoreState<StateType>('test', { x: '', y: 0 })\n */\n"],"mappings":"AAAA;AACA;AACA,MAAO,SAASA,UAAS,CAAIC,GAAW,CAAEC,KAAQ,CAAE,CAChD,GAAMC,cAAa,CAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC,CAC3CI,YAAY,CAACC,OAAO,CAACN,GAAG,CAAEE,aAAa,CAAC,CAC5C,CAEA;AACA,MAAO,SAASK,aAAY,CAAIP,GAAW,CAAEQ,YAAe,CAAE,CAC1D,GAAIP,MAAK,CAAGO,YAAY,CACxB,GAAMN,cAAa,CAAGG,YAAY,CAACI,OAAO,CAACT,GAAG,CAAC,CAC/C,GAAIE,aAAa,GAAK,IAAI,CAAED,KAAK,CAAGE,IAAI,CAACO,KAAK,CAACR,aAAa,CAAM,CAClE,MAAOD,MAAK,CAChB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}